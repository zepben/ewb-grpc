name: Release snapshot

on:
  push:
    branches:
      - main
      - LTS/*
      - hotfix/*
  workflow_dispatch:

jobs:
  licence-check-and-protolock-update:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - run: |
          apk add --no-cache tar

      - name: Cache licence-check
        uses: actions/cache@v3
        with:
          path: /lc
          key: lcc

      - name: Cache protolock
        uses: actions/cache@v3
        with:
          path: /protolock
          key: pbc

      - name: Check licence
        uses: zepben/licence-check-action@main
        with:
          LC_URL: ${{ secrets.LC_URL }}
          PATH: proto

      - name: Update protolock
        uses: zepben/protolock-action@main
        with:
          PATH: proto/zepben
          COMMIT: true

  java-deploy:
    needs: licence-check-and-protolock-update
    container: zepben/pipeline-java-ewb
    runs-on: ubuntu-latest
    env:
      ZEPBEN_GPG_KEY: ${{ secrets.ZEPBEN_GPG_KEY_B64 }}
      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      GPG_KEY_PASSWORD: ${{ secrets.GPG_KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v3

      - name: Cache maven deps
        uses: actions/cache@v3
        with:
          path: /maven
          key: maven

      - name: Java deploy to Central
        uses: zepben/maven-deploy-central-action@main
        with:
          ZEPBEN_GPG_KEY: ${{ secrets.ZEPBEN_GPG_KEY_B64 }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          GPG_KEY_PASSWORD: ${{ secrets.GPG_KEY_PASSWORD }}
          POM_PATH: java/pom.xml

  # CS deploy will deploy the built packages to our NUGET repository.
  # NUGET_SETTINGS: is a link to our Nuget.Config configuration in ci-utils repository.
  # ZEPBEN_NUGET_UPLOAD_FEED: is a link to our repository in form of https://<nexus-repo>/repository/nuget-releases/
  # ZEPBEN_NUGET_FEED_USERNAME: a username for Nexus-Nuget repository, used in Nuget.Config
  # ZEPBEN_NUGET_FEED_PASSWORD: a password for Nexus-Nuget repository, used in Nuget.Config
  # ZEPBEN_NUGET_UPLOAD_KEY: a key to use with Nexus repository on package push. 
  cs-deploy:
    needs: licence-check-and-protolock-update
    container: mcr.microsoft.com/dotnet/core/sdk:3.1
    runs-on: ubuntu-latest
    env:
      NUGET_SETTINGS: ${{ secrets.NUGET_SETTINGS }}
      ZEPBEN_NUGET_FEED_USERNAME: ${{ secrets.ZEPBEN_NUGET_FEED_USERNAME }}
      ZEPBEN_NUGET_FEED_PASSWORD: ${{ secrets.ZEPBEN_NUGET_FEED_PASSWORD }}
      ZEPBEN_NUGET_UPLOAD_KEY: ${{ secrets.ZEPBEN_NUGET_UPLOAD_KEY }}
      ZEPBEN_NUGET_UPLOAD_FEED: ${{ secrets.ZEPBEN_NUGET_UPLOAD_FEED }}
    steps:
      - uses: actions/checkout@v3

      - name: Cache C# deps
        uses: actions/cache@v3
        with:
          path: /root/.nuget/packages
          key: cs

      - name: Deploy CSharp
        run: |
          apt install -y curl
          cd cs
          curl $NUGET_SETTINGS -o Nuget.Config
          sed -i "s|ZEPBEN_NUGET_FEED_USERNAME|${ZEPBEN_NUGET_FEED_USERNAME}|g; s|ZEPBEN_NUGET_FEED_PASSWORD|${ZEPBEN_NUGET_FEED_PASSWORD}|g;" Nuget.Config
          dotnet restore evolve-grpc.csproj --configfile Nuget.Config
          dotnet pack evolve-grpc.csproj -c Release -o ./ --no-restore
          dotnet nuget push *.nupkg -k $ZEPBEN_NUGET_UPLOAD_KEY -s $ZEPBEN_NUGET_UPLOAD_FEED
        shell: bash

  python-deploy:
    needs: licence-check-and-protolock-update
    container: python:3.9
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install git
        run: |
          apt update && apt install -y git

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh


      - name: Cache python deps
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip

      - name: Create .pypirc
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "[pypi]" > ~/.pypirc
          echo "username = __token__" >> ~/.pypirc
          echo "password = ${PYPI_API_TOKEN}" >> ~/.pypirc
          echo "\n" >> ~/.pypirc

      - name: Deploy Python
        run: |
          echo "Show pypirc"
          cat ~/.pypirc
          cd python
          pip install 'twine==5.1.1'
          pip install -r requirements.txt
          python build.py --fullclean
          python build.py --package
          twine upload --verbose --non-interactive --config-file ~/.pypirc dist/* --skip-existing
        shell: bash

  update-snapshot-version:
    needs: [python-deploy, cs-deploy, java-deploy]
    container: zepben/pipeline-basic
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_MAVEN_SNAPSHOT: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
      NEXUS_MAVEN_RELEASE: ${{ secrets.NEXUS_MAVEN_RELEASE }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Update snapshot version
        run: |
          git pull origin $GITHUB_REF
          source /scripts/common.sh
          cd python
          /scripts/update-version.sh --python --snapshot --no-commit setup.cfg
          /scripts/update-version.sh --python --snapshot --no-commit setup.py
          cd ../java
          /scripts/update-version.sh --java --snapshot --maven --no-commit pom.xml
          cd ../cs
          /scripts/update-version.sh --csharp --snapshot --no-commit evolve-grpc.csproj
          commit_update_version ${GITHUB_REF/refs\/heads\//}
        shell: bash
