name: Release

on: workflow_dispatch

jobs:
  release-checks:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    outputs:
      version: ${{ steps.check.outputs.release-version }}
    env:
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_MAVEN_SNAPSHOT: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
      NEXUS_MAVEN_RELEASE: ${{ secrets.NEXUS_MAVEN_RELEASE }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Release checks and update version for release
        id: check
        run: |
          source /scripts/common.sh
          git checkout -b release
          /scripts/release-checks.sh --java --maven java/pom.xml
          /scripts/release-checks.sh --python python/pyproject.toml
          export release_date=$(date +'%d %B %Y')
          /scripts/finalize-version.sh --java --maven --no-commit java/pom.xml
          /scripts/finalize-version.sh --python --no-commit python/pyproject.toml
          commit_finalize_version
          version=$(xmlstarlet pyx java/pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/version")
          echo "release-version=$(echo $version)" >> ${GITHUB_OUTPUT}
        shell: bash

  java-deploy:
    needs: release-checks
    runs-on: ubuntu-latest
    container: zepben/pipeline-java-ewb
    outputs:
      artifact: ${{ steps.deploy.outputs.artifact }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: release

      - name: Cache maven deps
        uses: actions/cache@v4
        with:
          path: /maven
          key: maven

      - name: Maven deploy to Central
        id: deploy
        uses: zepben/maven-deploy-central-action@main
        with:
          ZEPBEN_GPG_KEY: ${{ secrets.ZEPBEN_GPG_KEY_B64 }}
          MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          GPG_KEY_PASSWORD: ${{ secrets.GPG_KEY_PASSWORD }}
          POM_PATH: java/pom.xml
        continue-on-error: true

      - name: Upload artifact
        id: artifact
        uses: actions/upload-artifact@v4
        with:
          name: java
          path: ${{ steps.deploy.outputs.artifact-path }}
        continue-on-error: true

      - name: Report any failures
        shell: bash
        run: |
          if [ "${{ steps.deploy.outcome }}" = "failure" ]; then
            echo " :boom: There was an error in the \`Maven deploy to Central\` step. Check the logs" >> ${GITHUB_STEP_SUMMARY}
          fi
          if [ "${{ steps.artifact.outcome }}" = "failure" ]; then
            echo " :boom: There was an error in the \`Upload artifact\` step. Check the logs" >> ${GITHUB_STEP_SUMMARY}
          fi

  python-deploy:
    needs: release-checks
    runs-on: ubuntu-latest
    container: python:3.9
    outputs:
      artifact: ${{ steps.deploy.outputs.artifact }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: release

      - name: Install git
        run: |
          apt update && apt install -y git

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Cache python deps
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip

      - name: Create .pypirc
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "[pypi]" > ~/.pypirc
          echo "username = __token__" >> ~/.pypirc
          echo "password = ${PYPI_API_TOKEN}" >> ~/.pypirc
          echo "\n" >> ~/.pypirc

      - name: Deploy Python
        id: deploy
        run: |
          echo "Show pypirc"
          cat ~/.pypirc
          cd python
          pip install 'twine==6.0.1'
          pip install -r requirements.txt
          python build.py --fullclean
          python build.py --package
          twine upload --verbose --non-interactive --config-file ~/.pypirc dist/*

          # Output artifact-path to ENV
          version=$(grep version= pyproject.toml | cut -d= -f2 | tr -d '",')
          artifact="zepben_protobuf-${version}-py3-none-any.whl"
          echo "artifact-path=$(echo python/dist/$artifact)" >> ${GITHUB_ENV}
          # and 'artifact' to OUTPUT
          echo "artifact=$(echo $artifact)" >> ${GITHUB_OUTPUT} 
        shell: bash
        continue-on-error: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        id: artifact
        with:
          name: python
          path: ${{ env.artifact-path }}
        continue-on-error: true

      - name: Report any failures
        shell: bash
        run: |
          if [ "${{ steps.deploy.outcome }}" = "failure" ]; then
            echo " :boom: There was an error in the \`Deploy Python\` step. Check the logs" >> ${GITHUB_STEP_SUMMARY}
          fi
          if [ "${{ steps.artifact.outcome }}" = "failure" ]; then
            echo " :boom: There was an error in the \`Upload artifact\` step. Check the logs" >> ${GITHUB_STEP_SUMMARY}
          fi

  finalise:
    needs: [java-deploy, python-deploy]
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Delete release branch if deploy failed and fail
        if: needs.java-deploy.outcome == 'failure' || needs.python-deploy.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in one of the deployment jobs. Check the logs above."
          exit 1
        shell: bash

      - name: Merge and Tag
        id: merge
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git merge origin/release
          git push origin ${GITHUB_REF/refs\/heads\//}
          cd java
          version=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/version")
          git tag "v$version"
          git push --tags
          echo "tag=$(echo v$version)" >> ${GITHUB_ENV}
          echo " " >> ${GITHUB_STEP_SUMMARY}
          echo ":rocket: The deployment to remote servers succeeded!" >> ${GITHUB_STEP_SUMMARY}
          echo "If there are errors above, investigate and resolve manually." >> ${GITHUB_STEP_SUMMARY}
        shell: bash

      - name: Download java artifact
        uses: actions/download-artifact@v4
        with:
          name: java

      - name: Download python artifact
        uses: actions/download-artifact@v4
        with:
          name: python
                  
      - name: Create Release and upload assets
        if: success()
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag }}
          body_path: changelog.md
          draft: false
          prerelease: false
          files: |
            ${{ needs.java-deploy.outputs.artifact }} 
            ${{ needs.python-deploy.outputs.artifact }} 
        continue-on-error: true

      - name: Report any failures
        shell: bash
        run: |
          if [ "${{ steps.create_release.outcome }}" = "failure" ]; then
            echo " :boom: There was an error in the \`Create Release and upload assets\` step. Check the logs" >> ${GITHUB_STEP_SUMMARY}
          fi

  update-version:
    needs: finalise
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_MAVEN_SNAPSHOT: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
      NEXUS_MAVEN_RELEASE: ${{ secrets.NEXUS_MAVEN_RELEASE }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}
          ref: release
          fetch-depth: 0

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Update to next minor version
        run: |
          source /scripts/common.sh
          cd python
          /scripts/update-version.sh --python --no-commit pyproject.toml
          cd ../java
          /scripts/update-version.sh --java --grow-changelog --maven --no-commit pom.xml ../changelog.md
          commit_update_version

          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git checkout ${GITHUB_REF/refs\/heads\//}
          git pull origin release
          git push origin ${GITHUB_REF/refs\/heads\//}
          git push origin -d release
        shell: bash
