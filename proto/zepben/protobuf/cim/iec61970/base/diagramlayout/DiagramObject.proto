/*
 * Copyright 2020 Zeppelin Bend Pty Ltd
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

syntax = "proto3";
option java_multiple_files = true;
option java_package = "com.zepben.protobuf.cim.iec61970.base.diagramlayout";
package zepben.protobuf.cim.iec61970.base.diagramlayout;

import "zepben/protobuf/cim/iec61970/base/diagramlayout/DiagramObjectPoint.proto";
import "zepben/protobuf/cim/iec61970/base/core/IdentifiedObject.proto";

/**
 * An object that defines one or more points in a given space. This object can be associated with anything
 * that specializes IdentifiedObject. For single line diagrams such objects typically include such items as
 * analog values, breakers, disconnectors, power transformers, and transmission lines.
 */
message DiagramObject {

    /**
     * The IdentifiedObject fields for this DiagramObject.
     */
    core.IdentifiedObject io = 1;

    /**
     * A diagram object is part of a diagram.
     */
    string diagramMRID = 2;

    /**
     * The domain object to which this diagram object is associated.
     */
    string identifiedObjectMRID = 3;

    /**
     * A diagram object has a style associated that provides a reference for the style used in the originating system.
     */
    string diagramObjectStyle = 4;

    /**
     * Sets the angle of rotation of the diagram object.  Zero degrees is pointing to the top of the diagram.  Rotation is clockwise.
     */
    double rotation = 5;

    /**
     * The diagram objects that are associated with the domain object.
     * <p>
     * The diagram objects are returned in a map sorted by the diagram they live in.
     */
    repeated DiagramObjectPoint diagramObjectPoints = 6;

}
