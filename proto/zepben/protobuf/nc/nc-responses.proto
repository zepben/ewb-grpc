/*
 * Copyright 2020 Zeppelin Bend Pty Ltd
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

syntax = "proto3";
option java_multiple_files = true;
option java_package = "com.zepben.protobuf.nc";
package zepben.protobuf.nc;

import "zepben/protobuf/nc/nc-data.proto";
import "zepben/protobuf/cim/extensions/iec61970/base/feeder/Loop.proto";
import "zepben/protobuf/cim/iec61970/base/core/Feeder.proto";
import "zepben/protobuf/cim/iec61970/base/core/GeographicalRegion.proto";
import "zepben/protobuf/cim/iec61970/base/core/SubGeographicalRegion.proto";
import "zepben/protobuf/cim/iec61970/base/core/Substation.proto";
import "zepben/protobuf/cim/iec61970/base/core/Terminal.proto";
import "zepben/protobuf/cim/iec61970/infiec61970/feeder/Circuit.proto";

/**
 * The response to a getNetworkHierarchy request.
 */
message GetNetworkHierarchyResponse {

    /**
     * An identifier for this message. Currently unused.
     */
    int64 messageId = 1;

    /**
     * The geographical regions contained in the network.
     */
    repeated cim.iec61970.base.core.GeographicalRegion geographicalRegions = 2;

    /**
     * The sub-geographical regions contained in the network.
     */
    repeated cim.iec61970.base.core.SubGeographicalRegion subGeographicalRegions = 3;

    /**
     * The substations contained in the network.
     */
    repeated cim.iec61970.base.core.Substation substations = 4;

    /**
     * The feeders contained in the network.
     */
    repeated cim.iec61970.base.core.Feeder feeders = 5;

    /**
     * The circuits contained in the network.
     */
    repeated cim.iec61970.infiec61970.feeder.Circuit circuits = 6;

    /**
     * The loops contained in the network.
     */
    repeated cim.extensions.iec61970.base.feeder.Loop loops = 7;

}

/**
 * The response to a getIdentifiedObjects request.
 */
message GetIdentifiedObjectsResponse {

    /**
     * An identifier for this message. Currently unused.
     */
    int64 messageId = 1;

    /**
     * The requested identified objects.
     */
    repeated NetworkIdentifiedObject identifiedObjects = 2;

}

/**
 * The response to a getEquipmentForContainers request.
 */
message GetEquipmentForContainersResponse {

    /**
     * An identifier for this message. Currently unused.
     */
    int64 messageId = 1;

    /**
     * The equipment contained in the requested equipment container.
     */
    repeated NetworkIdentifiedObject identifiedObjects = 2;

}

/**
 * The response to a getEquipmentForRestriction request.
 */
message GetEquipmentForRestrictionResponse {

    /**
     * An identifier for this message. Currently unused.
     */
    int64 messageId = 1;

    /**
     * The equipment restricted by the requested operations restriction.
     */
    repeated NetworkIdentifiedObject identifiedObjects = 2;

}

/**
 * The response to a getTerminalsForNode request.
 */
message GetTerminalsForNodeResponse {

    /**
     * An identifier for this message. Currently unused.
     */
    int64 messageId = 1;

    /**
     * One of the terminals connected to the requested connectivity node.
     */
    cim.iec61970.base.core.Terminal terminal = 2;

}
